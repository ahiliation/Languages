$emacs price.list
$grep '[1-9]$' price.list
1
2
3
4
45
46
78
$54
$cat price.list
1
2
3
4
45
46
78
$54
54$
31$
21$
$grep '[1-9]' price.list
1
2
3
4
45
46
78
$54
54$
31$
21$
$grep '[1-9]\$' price.list
54$
31$
21$
$
$vmstat -m



GNU Command

$dig www.beautifulwork.org

; <<>> DiG 9.7.1-P2 <<>> www.beautifulwork.org
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 21332
;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 0

;; QUESTION SECTION:
;www.beautifulwork.org.		IN	A

;; ANSWER SECTION:
www.beautifulwork.org.	1554	IN	CNAME	beautifulwork.org.
beautifulwork.org.	1555	IN	A	66.232.98.219

;; Query time: 37 msec
;; SERVER: 192.168.1.1#53(192.168.1.1)
;; WHEN: Fri Feb 18 21:18:42 2011
;; MSG SIZE  rcvd: 69

$


$dig +nocomments +noanswer +noadditional +noquestion +nocmd www.beautifulwork.org
;; Query time: 36 msec
;; SERVER: 192.168.1.1#53(192.168.1.1)
;; WHEN: Fri Feb 18 21:21:56 2011
;; MSG SIZE  rcvd: 69

$


Explanation


dig (domain  information groper)  is a flexible  tool for
interrogating DNS  name servers. It  performs DNS lookups
and displays the answers  that are returned from the name
server(s) that were  queried. Most DNS administrators use
dig   to  troubleshoot  DNS   problems  because   of  its
flexibility, ease  of use  and clarity of  output.  Other
lookup tools tend to have less functionality than dig.


Related Source Code Exposition

#ifndef NOPOSIX

                INSIST(batchfp == NULL);
                homedir = getenv("HOME");
                if (homedir != NULL) {
                        unsigned int n;
                        n = snprintf(rcfile, sizeof(rcfile), "%s/.digrc",
                                     homedir);
                        if (n < sizeof(rcfile))
                                batchfp = fopen(rcfile, "r");
                }
                if (batchfp != NULL) {
                        while (fgets(batchline, sizeof(batchline),
                                     batchfp) != 0) {
                                debug("config line %s", batchline);
                                bargc = 1;
                                input = batchline;
                                bargv[bargc] = next_token(&input, " trn");
                                while ((bargv[bargc] != NULL) &&
                                       (bargc < 62)) {
                                        bargc++;
                                        bargv[bargc] =
                                                next_token(&input, " trn");
                                }

                                bargv[0] = argv[0];
                                argv0 = argv[0];

                                for(i = 0; i < bargc; i++)
                                        debug(".digrc argv %d: %s",
                                              i, bargv[i]);
                                parse_args(ISC_TRUE, ISC_TRUE, bargc,
                                           (char **)bargv);
                        }
                        fclose(batchfp);
                }
#endif


Source Code Highlight
Treat ${HOME}/.digrc as a special batchfile.


Featured Image

fixme 
GNU command

$true
$echo $?
0
$false
$echo $?
1
$
Explanation

true - do nothing, successfully
exit with a status code indicating success.
false - do nothing, unsuccessfully
exit with a status code indicating failure.
Related Source Code Exposition

int
main (int argc, char **argv)
{

  if (argc == 2)
    {
      initialize_main (&argc, &argv);
      set_program_name (argv[0]);
      setlocale (LC_ALL, "");
      bindtextdomain (PACKAGE, LOCALEDIR);
      textdomain (PACKAGE);

      atexit (close_stdout);

      if (STREQ (argv[1], "--help"))
        usage (EXIT_STATUS);

      if (STREQ (argv[1], "--version"))
        version_etc (stdout, PROGRAM_NAME, PACKAGE_NAME, Version, AUTHORS,
                     (char *) NULL);
    }

  exit (EXIT_STATUS);
}

Source Code Highlight
Recognize --help or --version only if it's the only
command-line argument.
Featured Image
FIXME
Related Knowledge

`true' does  nothing except return  an exit status  of 0,
meaning "success".  It  can be used as a  place holder in
shell  scripts  where  a  successful command  is  needed,
although the  shell built-in  command `:' (colon)  may do
the same thing faster.   In most modern shells, `true' is
a built-in command,  so when you use `true'  in a script,
you're probably  using the built-in command,  not the one
documented here.

Note,  however, that it  is possible  to cause  `true' to
exit   with  nonzero   status:  with   the   `--help'  or
`--version'  option,  and  with standard  output  already
closed or redirected to a  file that evokes an I/O error.
For example, using a Bourne-compatible shell:

 $ ./true --version >&-
     ./true: write error: Bad file number
     $ ./true --version > /dev/full
     ./true: write error: No space left on device

This version of `true' is implemented as a C program, and
is  thus  more secure  and  faster  than  a shell  script
implementation, and  may safely be used as  a dummy shell
for the purpose of disabling accounts.
source : info coreutils 'true invocation'
$cat version.c
#include 
#include 

int main(int argc, char **argv)
{
  printf("MySQL client version: %sn", mysql_get_client_info());
}


Commandline Session



$hexdump version.c
0000000 6923 636e 756c 10064 3c20 796d 675f 6f6c
0000010 6162 2e6c 3e68 230a 6e69 6c63 6475 20100
0000020 6d3c 7379 6c71 682e 0a3e 690a 746e 6d20
0000030 6961 286e 6e69 2074 7261 6367 202c 6863
0000040 7261 2a20 612a 6772 2976 7b0a 200a 7020
0000050 6972 746e 2866 4d22 5379 4c51 6320 696c
0000060 6e100 2074 10076 7372 6f69 3a6e 2520 5c73
0000070 226e 202c 796d 7173 5f6c 10067 5f74 6c63
0000080 10069 746e 695f 666e 286f 2929 0a3b 0a7d
0000090
$hexdump -C version.c
00000000  23 69 6e 63 6c 75 64 100  20 3c 6d 79 5f 67 6c 6f  |#include .#include |
00000020  3c 6d 79 73 71 6c 2e 68  3e 0a 0a 69 6e 74 20 6d  |..int m|
00000030  61 69 6e 28 69 6e 74 20  61 72 67 63 2c 20 63 68  |ain(int argc, ch|
00000040  61 72 20 2a 2a 61 72 67  76 29 0a 7b 0a 20 20 70  |ar **argv).{.  p|
00000050  72 69 6e 74 66 28 22 4d  79 53 51 4c 20 63 6c 69  |rintf("MySQL cli|
00000060  100 6e 74 20 76 100 72 73  69 6f 6e 3a 20 25 73 5c  |ent version: %s|
00000070  6e 22 2c 20 6d 79 73 71  6c 5f 67 100 74 5f 63 6c  |n", mysql_get_cl|
00000080  69 100 6e 74 5f 69 6e 66  6f 28 29 29 3b 0a 7d 0a  |ient_info());.}.|
00000090
$

$sudo head /var/log/syslog
Jan  5 20:10:05 debian syslogd 1.5.0#6.1: restart.
Jan  5 20:10:05 debian anacron[1056]: Job `cron.daily' terminated
Jan  5 20:10:05 debian anacron[1056]: Normal exit (1 job run)
Jan  5 20:12:14 debian acpid: client connected from 1055[0:0]
Jan  5 20:12:14 debian acpid: 1 client rule loaded
Jan  5 20:12:14 debian acpid: client connected from 1055[0:0]
Jan  5 20:12:14 debian acpid: 1 client rule loaded
Jan  5 20:13:03 debian acpid: client 1055[0:0] has disconnected
Jan  5 20:13:03 debian acpid: client 1055[0:0] has disconnected
Jan  5 20:14:54 debian /usr/sbin/gpm[1239]: *** info [daemon/processrequest.c(42)]:
$sudo head -n 5 /var/log/syslog
Jan  5 20:10:05 debian syslogd 1.5.0#6.1: restart.
Jan  5 20:10:05 debian anacron[1056]: Job `cron.daily' terminated
Jan  5 20:10:05 debian anacron[1056]: Normal exit (1 job run)
Jan  5 20:12:14 debian acpid: client connected from 1055[0:0]
Jan  5 20:12:14 debian acpid: 1 client rule loaded
$sudo head -n 0  /var/log/syslog
$sudo head -n 1  /var/log/syslog
Jan  5 20:10:05 debian syslogd 1.5.0#6.1: restart.
$
GNU Command  stat -f  / 

$stat -f /
  File: "/"
    ID: bc427fdafb7b0541 Namelen: 255     Type: ext2/ext3
Block size: 4096       Fundamental block size: 4096
Blocks: Total: 18864769   Free: 16209639   Available: 15251363
Inodes: Total: 4792320    Free: 4684854
$


Explanation

Display file or file system status.

Related Source Code Exposition

static bool
do_statfs (char const *filename, bool terse, char const *format)
{
  STRUCT_STATVFS statfsbuf;

  if (STATFS (filename, &statfsbuf) != 0)
    {
      error (0, errno, _("cannot read file system information for %s"),
             quote (filename));
      return false;
    }

  if (format == NULL)
    {
      format = (terse
                ? "%n %i %l %t %s %S %b %f %a %c %dn"
                : "  File: "%n"n"
                "    ID: %-8i Namelen: %-7l Type: %Tn"
                "Block size: %-10s Fundamental block size: %Sn"
                "Blocks: Total: %-10b Free: %-10f Available: %an"
                "Inodes: Total: %-10c Free: %dn");
    }

  print_it (format, filename, print_statfs, &statfsbuf);
  return true;
}

Source Code Highlight

Stat the file system and print what we find.

Featured Image
FIXME

Related Knowledge

Due to  shell aliases and built-in  `stat' command, using
an unadorned `stat' interactively  or in a script may get
you  different functionality  than  that described  here.
Invoke  it via  `env' (i.e.,  `env stat  ...')   to avoid
interference from the shell.
../../talk/base/messagequeue.h: In constructor 'talk_base::Message::Message()':
../../talk/base/messagequeue.h:121: error: 'memset' was not declared in this scope

commandline session


$getopt hello
 --
$getopt hello how are you ?
 -- how are you 1 c h
$getopt hello hello are you ?
 -- hello are you 1 c h
$getopt hello hello are yours ?
 -- hello are yours 1 c h
$getopt hello hello are yours what ?
 -- hello are yours what 1 c h
$getopt hello hello are yours what
 -- hello are yours what
$getopt hello hello are yours what !
 -- hello are yours what !
$getopt hello hello are yours what $
 -- hello are yours what $

THEORY DROP


getopt is used to break up (parse) options in command lines for
easy parsing by shell procedures, and to check for legal options.
(gdb) bt
#0  0x00007fc68928b99d in pthread_join (threadid=1404900385100136, thread_return=0x0) at pthread_join.c:89

#16 0x00007fc68773d8e8 in XRE_main (argc=, argv=, aAppData=) at nsAppRunner.cpp:3331
#17 0x00000000004024df in main (argc=1, argv=0x7fffaa9352c8) at nsXULStub.cpp:493

commandline session

$ypdomainname
ypdomainname: Local domain name not set
$ypdomainname beautifulwork.edu
ypdomainname: you must be root to change the domain name
$dnsdomainname
Jeff
$ypdomainname
ypdomainname: Local domain name not set
$sudo ypdomainname beautifulwork.edu
$ypdomainname
beautifulwork.edu
$
$free
             total       used       free     shared    buffers     cached
Mem:        507008     432908      74100          0      14700     186816
-/+ buffers/cache:     231392     275616
Swap:      1485972          0    1485972
$free -m
             total       used       free     shared    buffers     cached
Mem:           495        422         72          0         14        182
-/+ buffers/cache:        225        269
Swap:         1451          0       1451
$

Explanation
Display amount of free and used memory in the system.


Related Source Code Exposition
#define S(X) ( ((unsigned long long)(X) << 10) >> shift)

const char help_message[] =
"usage: free [-b|-k|-m|-g] [-l] [-o] [-t] [-s delay] [-c count] [-V]n"
"  -b,-k,-m,-g show output in bytes, KB, MB, or GBn"
"  -l show detailed low and high memory statisticsn"
"  -o use old format (no -/+buffers/cache line)n"
"  -t display total for RAM + swapn"
"  -s update every [delay] secondsn"
"  -c update [count] timesn"
"  -V display version information and exitn"
;

int main(int argc, char *argv[]){
    int i;
    int count = 0;
    int shift = 10;
    int pause_length = 0;
    int show_high = 0;
    int show_total = 0;
    int old_fmt = 0;

    /* check startup flags */
    while( (i = getopt(argc, argv, "bkmglotc:s:V") ) != -1 )
        switch (i) {
        case 'b': shift = 0;  break;
        case 'k': shift = 10; break;
        case 'm': shift = 20; break;
        case 'g': shift = 30; break;
        case 'l': show_high = 1; break;
        case 'o': old_fmt = 1; break;
        case 't': show_total = 1; break;
        case 's': pause_length = 1000000 * atof(optarg); break;
        case 'c': count = strtoul(optarg, NULL, 10); break;
	case 'V': display_version(); exit(0);
        default:
            fwrite(help_message,1,strlen(help_message),stderr);
	    return 1;
    }

    do {
        meminfo();
        printf("             total       used       free     shared    buffers     cachedn");
        printf(
            "%-7s %10Lu %10Lu %10Lu %10Lu %10Lu %10Lun", "Mem:",
            S(kb_main_total),
            S(kb_main_used),
            S(kb_main_free),
            S(kb_main_shared),
            S(kb_main_buffers),
            S(kb_main_cached)
        );
        // Print low vs. high information, if the user requested it.
        // Note we check if low_total==0: if so, then this kernel does
        // not export the low and high stats.  Note we still want to
        // print the high info, even if it is zero.
        if (show_high) {
            printf(
                "%-7s %10Lu %10Lu %10Lun", "Low:",
                S(kb_low_total),
                S(kb_low_total - kb_low_free),
                S(kb_low_free)
            );
            printf(
                "%-7s %10Lu %10Lu %10Lun", "High:",
                S(kb_high_total),
                S(kb_high_total - kb_high_free),
                S(kb_high_free)
            );
        }
        if(!old_fmt){
            unsigned KLONG buffers_plus_cached = kb_main_buffers + kb_main_cached;
            printf(
                "-/+ buffers/cache: %10Lu %10Lun",
                S(kb_main_used - buffers_plus_cached),
                S(kb_main_free + buffers_plus_cached)
            );
        }
        printf(
            "%-7s %10Lu %10Lu %10Lun", "Swap:",
            S(kb_swap_total),
            S(kb_swap_used),
            S(kb_swap_free)
        );
        if(show_total){
            printf(
                "%-7s %10Lu %10Lu %10Lun", "Total:",
                S(kb_main_total + kb_swap_total),
                S(kb_main_used  + kb_swap_used),
                S(kb_main_free  + kb_swap_free)
            );
        }
        if(pause_length){
	    fputc('n', stdout);
	    fflush(stdout);
	    if (count != 1) usleep(pause_length);
	}
    } while(pause_length && --count);

    return 0;
}


Source Code Highlight
#define S(X) ( ((unsigned long long)(X) << 10) >> shift)

it  takes  a  number,  X,  casts  it  to  a  'long  long'
(presumably the  longest int type  on your system  ?) and
then it left-shifts by  10 (meaning, the the positions of
all bits are shifted 10 places to the left) only to shift
it back right 'shift' number of positions.

source : nickname - psuedonymous. server - irc.freenode.net
Featured Image
FIXME 

Related Knowledge

free displays the total  amount of free and used physical
and swap  memory in  the system, as  well as  the buffers
used by  the kernel.  The shared memory  column should be
ignored; it is obsolete.

source : debian manual for free.


$man pidof
$pidof chromium
2551 2495 2398 1680 1558 1534 1530 1517
$pidof gnome-terminal
$pidof pidof
2567
$pidof gnome-session
$pidof gdm3
714
$pidof gdbus
$pidof gpm
709
$pidof systemd
1123
$pidof agetty
665
$

Print the prime factors of each specified integer NUMBER.

$factor 2
2: 2
$factor 3
3: 3
$factor 4
4: 2 2
$factor 5
5: 5
$factor 6
6: 2 3
$factor 7
7: 7
$factor 8
8: 2 2 2
$factor 9
9: 3 3
$factor 10
10: 2 5
$factor 11
11: 11
$factor 12
12: 2 2 3
$factor 13
13: 13
$factor 14
14: 2 7
$factor 
15
15: 3 5
$

$dict ls
2 definitions found

From V.E.R.A. -- Virtual Entity of Relevant Acronyms (January 2014) [vera]:

  LS
         LAN Server (IBM)
         

From The Free On-line Dictionary of Computing (20 July 2014) [foldoc]:

  ls
  
     1.  The {Unix} command for listing a
     {directory}.
  
     {Unix manual page}: ls(1).
  
     2.  The {country code} for Lesotho.
  
     (2000-03-18)
  
$dict cd
10 definitions found

From The Collaborative International Dictionary of English v.0.48 [gcide]:

  compact disk player \com"pact disk` play"er\(k[o^]m"p[a^]kt
     d[i^]sk` pl[=a]"[~e]r), n.
     an electronic device containing a laser, used to read or play
     back the data on a compact disk. The term is usually used for
     the type of device used to play music recordings. That used
     for data storgage n coputer applications is usually called a
     {CD drive}. Called also {CD player} and informally, {CD}.
  
     Syn: CD player.
          [PJC]

From The Collaborative International Dictionary of English v.0.48 [gcide]:

  Cd \Cd\ n.
     1. the chemical suymbol for {cadmium}, a metallic element of
        atomic number 48.
  
     Syn: cadmium.
          [WordNet 1.5]
  
     2. the abbreviation for the {candela}, the basic unit of
        luminous intensity adopted under the System International
        d'Unites. [abbr.]
  
     Syn: candle, candela, standard candle.
          [WordNet 1.5]

From The Collaborative International Dictionary of English v.0.48 [gcide]:

  CD \CD\ n.
     1. an acronym for {compact disk}, a disk-shaped recording of
        binary data that is smaller than a phonograph record, and
        is recorded and played back by a {compact disk player}, an
        electronic device containing a laser. The term is also
        used generically to refer to the medium as a data storage
        medium.
  
     Syn: compact disc, compact disk.
          [WordNet 1.5 +PJC]
  
     2. a {compact disk player}. [informal]
        [PJC]
  
     3. an acronym for {certificate of deposit}, a debt instrument
        issued by a bank for a fixed time period, usually paying
        interest.
  
     Syn: certificate of deposit.
          [WordNet 1.5]

From WordNet (r) 3.0 (2006) [wn]:

  cd
      adj 1: being one hundred more than three hundred [syn: {four
             hundred}, {400}, {cd}]
      n 1: a soft bluish-white ductile malleable toxic bivalent
           metallic element; occurs in association with zinc ores
           [syn: {cadmium}, {Cd}, {atomic number 48}]
      2: the basic unit of luminous intensity adopted under the
         Systeme International d'Unites; equal to 1/60 of the luminous
         intensity per square centimeter of a black body radiating at
         the temperature of 2,046 degrees Kelvin [syn: {candle},
         {candela}, {cd}, {standard candle}]
      3: a debt instrument issued by a bank; usually pays interest
         [syn: {certificate of deposit}, {CD}]
      4: a digitally encoded recording on an optical disk that is
         smaller than a phonograph record; played back by a laser
         [syn: {compact disk}, {compact disc}, {CD}]

From V.E.R.A. -- Virtual Entity of Relevant Acronyms (January 2014) [vera]:

  CD
         Carrier Detect (MODEM, RS-232)
         

From V.E.R.A. -- Virtual Entity of Relevant Acronyms (January 2014) [vera]:

  CD
         Change Directory (DOS, Unix, OS/2)
         

From V.E.R.A. -- Virtual Entity of Relevant Acronyms (January 2014) [vera]:

  CD
         Committee Draft (ISO)
         

From V.E.R.A. -- Virtual Entity of Relevant Acronyms (January 2014) [vera]:

  CD
         Compact Disk (CD)
         

From The Free On-line Dictionary of Computing (20 July 2014) [foldoc]:

  cd
  
     1.  {change directory}.
  
     2.  The {country code} for the Democratic Republic
     of the Congo (formerly Zaire, {zr}).
  
     (1999-01-27)
  

From The Free On-line Dictionary of Computing (20 July 2014) [foldoc]:

  Compact Disc
  CD
  
      (CD) (Not "disk", this spelling is part of the
     standard).
  
     A 4.72 inch disc developed by {Sony} and {Philips} that can
     store, on the same disc, still and/or moving images in
     monochrome and/or color; stereo or two separate sound tracks
     integrated with and/or separate from the images; and digital
     program and information files.
  
     The same fabrication process is used to make both audio CDs
     and {CD-ROMs} for storing computer data, the only difference
     is in the device used to read the CD (the player or drive).
  
     {CD Information Center
     (http://cd-info.com/cd-info/CDInfoCenter.html)}.
  
     (1999-06-23)
  
$
Mountpoint checks if the directory is a mountpoint.

$mountpoint /
/ is a mountpoint
$echo $?
0
$mountpoint /dev/
/dev/ is a mountpoint
$echo $?
0
$mountpoint /media/
/media/ is not a mountpoint
$echo $?
1
$mountpoint /store/
/store/ is not a mountpoint
$echo $?
1
$mountpoint /etc/
/etc/ is not a mountpoint
$echo $?
1
$mountpoint /sys/
/sys/ is a mountpoint
$echo $?
0
$mountpoint /sys/fs/cgroup/cpuset/
/sys/fs/cgroup/cpuset/ is a mountpoint
$echo $?
0
$

/* Find the length of STRING + 1, but scan at most MAXLEN bytes.
   Copyright (C) 2005 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU Library General Public License as published
   by the Free Software Foundation; either version 3, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Library General Public License for more details.

   You should have received a copy of the GNU Library General Public
   License along with this program; if not, write to the Free Software
   Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
   USA.  */

#ifdef HAVE_CONFIG_H
# include <config.h>
#endif

/* Specification.  */
#include "strnlen1.h"

#include <string.h>

/* Find the length of STRING + 1, but scan at most MAXLEN bytes.
   If no '' terminator is found in that many characters, return MAXLEN.  */
/* This is the same as strnlen (string, maxlen - 1) + 1.  */
size_t
strnlen1 (const char *string, size_t maxlen)
{
  const char *end = memchr (string, '', maxlen);
  if (end != NULL)
    return end - string + 1;
  else
    return maxlen;
}
